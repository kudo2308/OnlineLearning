/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import DAO.BlogDAO;
import DAO.CategoryDAO;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import model.Blog;
import model.Category;

/**
 *
 * @author ASUS
 */
@WebServlet(name = "BlogController", urlPatterns = {"/Blog"})
public class BlogController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int page = 1; // Trang m·∫∑c ƒë·ªãnh
        int recordsPerPage = 6; // S·ªë b√†i vi·∫øt m·ªói trang

        // Nh·∫≠n tham s·ªë t·ª´ request
        String pageParam = request.getParameter("page");
        String categoryIdParam = request.getParameter("categoryId");
        String keyword = request.getParameter("search");

        // Chuy·ªÉn ƒë·ªïi `page` t·ª´ String sang int
        if (pageParam != null && !pageParam.isEmpty()) {
            try {
                page = Integer.parseInt(pageParam);
            } catch (NumberFormatException e) {
                page = 1;
            }
        }

        // Chuy·ªÉn ƒë·ªïi `categoryId` t·ª´ String sang int
        int categoryId = 0; // 0 = l·∫•y t·∫•t c·∫£ danh m·ª•c (All Categories)
        if (categoryIdParam != null && !categoryIdParam.isEmpty()) {
            try {
                categoryId = Integer.parseInt(categoryIdParam);
            } catch (NumberFormatException e) {
                categoryId = 0;
            }
        }

        // T√≠nh to√°n offset ƒë·ªÉ ph√¢n trang
        int offset = (page - 1) * recordsPerPage;

        // Kh·ªüi t·∫°o DAO
        CategoryDAO categoryDAO = new CategoryDAO();
        BlogDAO blogDAO = new BlogDAO();

        // L·∫•y danh s√°ch danh m·ª•c
        List<Category> categoryList = categoryDAO.findAll();

        // L·∫•y danh s√°ch blog theo danh m·ª•c (n·∫øu c√≥)
        List<Blog> blogs;

        if (categoryId > 0) {
            // üîπ N·∫øu c√≥ danh m·ª•c ƒë∆∞·ª£c ch·ªçn, l·∫•y blog theo danh m·ª•c
            blogs = blogDAO.getBlogByCategoryId(categoryId);
        } else {
            // üîπ N·∫øu ch·ªçn "All Categories" (categoryId = 0), l·∫•y to√†n b·ªô blog
            blogs = blogDAO.getAllBlogs(0, Integer.MAX_VALUE);
        }

        // üîπ N·∫øu c√≥ t·ª´ kh√≥a t√¨m ki·∫øm, l·ªçc danh s√°ch b·∫±ng `stream()`
        if (keyword != null && !keyword.trim().isEmpty()) {
            blogs = blogs.stream()
                    .filter(blog -> blog.getTitle().toLowerCase().contains(keyword.toLowerCase()))
                    .collect(Collectors.toList());
        }

        // T√≠nh t·ªïng s·ªë b√†i vi·∫øt sau khi l·ªçc
        int totalBlogs = blogs.size();
        int totalPages = (int) Math.ceil((double) totalBlogs / recordsPerPage);

        // üîπ C·∫Øt danh s√°ch blog theo trang (ph√¢n trang sau khi l·ªçc)
        int toIndex = Math.min(offset + recordsPerPage, totalBlogs);
        if (offset < totalBlogs) {
            blogs = blogs.subList(offset, toIndex);
        } else {
            blogs = List.of(); // Tr√°nh l·ªói IndexOutOfBoundsException
        }

        // ƒê∆∞a d·ªØ li·ªáu v√†o request
        request.setAttribute("blogs", blogs);
        request.setAttribute("searchKeyword", keyword);
        request.setAttribute("categories", categoryList);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("currentPage", page);
        request.setAttribute("selectedCategory", categoryId);

        // Forward ƒë·∫øn trang blog
        request.getRequestDispatcher("views/user/BlogClassic.jsp").forward(request, response);
    }
}





